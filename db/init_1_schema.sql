CREATE TYPE payment_status AS ENUM (
  'PENDING',
  'COMPLETED',
  'FAILED',
  'REFUNDED'
);

CREATE TYPE order_status AS ENUM (
  'PENDING',
  'PROCESSING',
  'COMPLETED',
  'CANCELLED',
  'REFUNDED'
);

CREATE TYPE cart_status AS ENUM (
  'ACTIVE',
  'CHECKED_OUT',
  'EXPIRED',
  'ABANDONED'
);

CREATE TYPE coupon_status AS ENUM (
  'DISABLED',
  'ACTIVE',
  'EXPIRE'
);

CREATE TYPE media_type AS ENUM (
  'IMAGE',
  'VIDEO'
);

CREATE TYPE sale_status AS ENUM (
  'DISABLED',
  'ACTIVE',
  'EXPIRE'
);

CREATE TABLE IF NOT EXISTS games (
  id SERIAL PRIMARY KEY,
  description_id INTEGER,
  title VARCHAR(255) NOT NULL,
  price INTEGER NOT NULL,
  stock INTEGER NOT NULL DEFAULT 0,
  avg_rating INTEGER NOT NULL DEFAULT 5,
  platform_id INTEGER NOT NULL,
  sale_id INTEGER NOT NULL DEFAULT 1,
  deleted_on TIMESTAMP DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS game_description (
  id SERIAL PRIMARY KEY,
  description TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS sales (
  id SERIAL PRIMARY KEY,
  amount INTEGER NOT NULL,
  status VARCHAR(255) NOT NULL,
  start_date TIMESTAMP,
  end_date TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS game_key (
  id INTEGER PRIMARY KEY,
  game_id INTEGER NOT NULL,
  key VARCHAR(255) NOT NULL,
  order_item_id INTEGER NOT NULL,
  activated BOOLEAN NOT NULL DEFAULT false,
  reserved_until TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS platforms (
  id SERIAL PRIMARY KEY,
  parent_id INTEGER DEFAULT NULL,
  name VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS admins (
  id SERIAL PRIMARY KEY,
  role_id INTEGER,
  fullname VARCHAR,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS roles (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description VARCHAR,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS coupons (
  id SERIAL PRIMARY KEY,
  coupon_type_id INTEGER NOT NULL,
  code VARCHAR(255) NOT NULL,
  discount_amount INTEGER,
  usage_limit INTEGER,
  used_count INTEGER,
  start_date TIMESTAMP,
  end_date TIMESTAMP,
  status coupon_status NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE coupon_types (
  id SERIAL PRIMARY KEY,
  type VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS medias (
  id SERIAL PRIMARY KEY,
  game_id INTEGER NOT NULL,
  media_type VARCHAR(255) NOT NULL,
  url VARCHAR(255) NOT NULL,
  is_primary bool NOT NULL DEFAULT false,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS carts (
  id SERIAL PRIMARY KEY,
  status cart_status NOT NULL default 'ACTIVE',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS cart_items (
  id SERIAL PRIMARY KEY,
  game_id INTEGER NOT NULL,
  cart_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (game_id, cart_id)
);

CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  avatar VARCHAR(255),
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  name VARCHAR,
  cart_id INTEGER,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS reviews (
  id SERIAL PRIMARY KEY,
  game_id INTEGER NOT NULL,
  user_id INTEGER NOT NULL,
  rating INTEGER NOT NULL DEFAULT 5,
  recommend BOOLEAN NOT NULL DEFAULT true,
  comment VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS orders (
  id SERIAL PRIMARY KEY,
  payment_method_id INTEGER,
  session_id VARCHAR(255),
  url TEXT,
  order_status VARCHAR(255) NOT NULL,
  payment_status VARCHAR(255) NOT NULL,
  original_amount INTEGER,
  discount_amount INTEGER,
  total_amount INTEGER NOT NULL,
  user_id INTEGER NOT NULL,
  deleted_on TIMESTAMP DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS order_item (
  id SERIAL PRIMARY KEY,
  order_id INTEGER NOT NULL,
  game_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  unit_price INTEGER NOT NULL,
  total_price INTEGER NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS payment_method (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(255) NOT NULL,
  account VARCHAR(255) NOT NULL,
  image VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- TODO: wishlist
-- TODO: add unique constraint

ALTER TABLE games ADD FOREIGN KEY (sale_id) REFERENCES sales (id);

ALTER TABLE game_key ADD FOREIGN KEY (game_id) REFERENCES games (id);

ALTER TABLE admins ADD FOREIGN KEY (role_id) REFERENCES roles (id);

ALTER TABLE games ADD FOREIGN KEY (description_id) REFERENCES game_description (id);

ALTER TABLE medias ADD FOREIGN KEY (game_id) REFERENCES games (id);

ALTER TABLE coupons ADD FOREIGN KEY (coupon_type_id) REFERENCES coupon_types (id);

ALTER TABLE games ADD FOREIGN KEY (platform_id) REFERENCES platforms (id);

ALTER TABLE cart_items ADD FOREIGN KEY (cart_id) REFERENCES carts (id);

ALTER TABLE cart_items ADD FOREIGN KEY (game_id) REFERENCES games (id);

ALTER TABLE users ADD FOREIGN KEY (cart_id) REFERENCES carts (id);

ALTER TABLE reviews ADD FOREIGN KEY (game_id) REFERENCES games (id);

ALTER TABLE reviews ADD FOREIGN KEY (user_id) REFERENCES users (id);

-- temporary work around for ENUM
CREATE CAST (character varying AS cart_status) WITH INOUT AS ASSIGNMENT;

